from django_filters import rest_framework as filters

from core import models

# Filtros de pesquisa
LIKE = 'unaccent__icontains' # Usando unaccent para ignorar acentos e trazer palavras semelhantes
ICONTAINS = 'icontains' # Usando icontains para trazer palavras semelhantes
UNACCENT_IEXACT = 'unaccent__iexact' # Usando unaccent para ignorar acentos e trazer palavras exatas
EQUALS = 'exact' # Usando exact para trazer o campo exatas
STARTS_WITH = 'startswith' # Usando startswith para trazer palavras que começam com o termo pesquisado
GT = 'gt' # maior que
LT = 'lt' # menor que
GTE = 'gte' # maior ou igual a
LTE = 'lte' # menor ou igual a
IN = 'in' # Usando in para trazer palavras que estão na lista





class AuthorFilter(filters.FilterSet):
    name = filters.CharFilter(field_name="name", lookup_expr=LIKE)
    country = filters.CharFilter(field_name="country", lookup_expr=LIKE)
    email = filters.CharFilter(field_name="email", lookup_expr=LIKE)
    created_by = filters.CharFilter(field_name="created_by", lookup_expr=STARTS_WITH)
    modified_by = filters.CharFilter(field_name="modified_by", lookup_expr=STARTS_WITH)

    class Meta:
        model = models.Author
        fields = ['name', 'country', 'email']

class BookFilter(filters.FilterSet):
    name = filters.CharFilter(field_name="name", lookup_expr=LIKE)
    id = filters.CharFilter(field_name="id", lookup_expr=ICONTAINS)
    publication = filters.DateFilter(field_name="publication", lookup_expr=ICONTAINS)
    created_by = filters.DateFilter(field_name="created_by", lookup_expr=ICONTAINS)
    modified_by = filters.DateFilter(field_name="modified_by", lookup_expr=ICONTAINS)

    class Meta:
        model = models.Book
        fields = ['name', 'id', 'created_by', 'modified_by' , 'publication']


class UserFilter(filters.FilterSet):
    username = filters.CharFilter(field_name="name", lookup_expr=LIKE)
    cpf = filters.NumberFilter(field_name="cpf", lookup_expr=STARTS_WITH)
    email = filters.CharFilter(field_name="email", lookup_expr=LIKE)
    status = filters.BooleanFilter(field_name="status", lookup_expr=LIKE)
    profile = filters.CharFilter(field_name="profile", lookup_expr=LIKE)


    class Meta:
        model = models.User
        fields = ['username', 'cpf', 'email', 'status' , 'profile']

class LoanFilter(filters.FilterSet):
    id = filters.NumberFilter(field_name="id", lookup_expr=EQUALS)
    dt_retirar = filters.DateFilter(field_name="dt_retirar", lookup_expr=STARTS_WITH)
    dt_devolucao = filters.DateFilter(field_name="dt_devolucao", lookup_expr=STARTS_WITH)
    dt_entrega = filters.DateFilter(field_name="dt_entrega", lookup_expr=STARTS_WITH)
    created_by = filters.DateFilter(field_name="created_by", lookup_expr=STARTS_WITH)
    modified_by = filters.DateFilter(field_name="modified_by", lookup_expr=STARTS_WITH)
    qtde =filters.NumberFilter(field_name="qtde", lookup_expr=GT)

    class Meta:
        model = models.Loan
        fields = ['id' ,'dt_retirar', 'dt_devolucao', 'dt_entrega']

class AddressFilter(filters.FilterSet):
    street = filters.CharFilter(field_name="street", lookup_expr=LIKE)
    city = filters.CharFilter(field_name="city", lookup_expr=LIKE)
    state = filters.CharFilter(field_name="state", lookup_expr=LIKE)
    country = filters.CharFilter(field_name="country", lookup_expr=LIKE)
    reference = filters.CharFilter(field_name="reference", lookup_expr=LIKE)

    class Meta:
        model = models.Address
        fields = ['street', 'city', 'state', 'country', 'reference']

class PhoneFilter(filters.FilterSet):
    phone = filters.NumberFilter(field_name="phone", lookup_expr=EQUALS)
    class Meta:
        model = models.Phone
        fields = ['phone']

class ProfileFilter(filters.FilterSet):   # <-- antes era "Profiler"
    profile_name = filters.CharFilter(field_name="name", lookup_expr="icontains")
    limit = filters.NumberFilter(field_name="limit", lookup_expr="exact")

    class Meta:
        model = models.Profile


























